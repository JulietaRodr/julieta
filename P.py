import streamlit as st
import yfinance as yf
import altair as alt
import pandas as pd
import google.generativeai as genai
import numpy as np
import plotly.express as px
from datetime import datetime
from pandas.tseries.offsets import DateOffset
from dotenv import load_dotenv
import os

# Cargar variables de entorno
load_dotenv()

# Configurar la API Key para Generative AI
TOKEN_GENAI = os.getenv("TOKEN_GENAI")
if TOKEN_GENAI:
    genai.configure(api_key=TOKEN_GENAI)
    model = genai.GenerativeModel("models/gemini-1.5-pro")
else:
    st.warning("‚ö†Ô∏è La API Key de Generative AI no est√° configurada. Algunas funcionalidades estar√°n limitadas.")

# Estilo general
dark_brown = "#3e1f14"
light_beige = "#fff5e6"
light_pink = "#f3c1c6"
pale_gold = "#d4a373"
girly_placeholder = "#a1887f"
bright_pink = "#e88f9c"

# CSS personalizado
theme_css = f"""
<style>
body, .main, .block-container {{
  background-color: {light_beige};
  color: {dark_brown};
}}
h1, h2, h3, h4, h5, h6, p, li, span, div, label, table, th, td {{
  color: {dark_brown} !important;
}}
[data-testid="stSidebar"] {{
  background-color: #fff1dc;
  color: {dark_brown};
}}
[data-testid="stMetricDelta"] {{
  color: {bright_pink};
}}
input, .stTextInput > div > input, .stButton > button {{
  background-color: #fffaf2;
  color: {dark_brown};
  border-color: {pale_gold};
}}
.stButton > button {{
  background-color: {bright_pink};
  color: white;
  border: 2px solid {dark_brown};
  font-weight: bold;
  transition: 0.3s;
  padding: 10px 20px;
  border-radius: 10px;
}}
.stButton > button:hover {{
  background-color: #f7d6db;
  color: {dark_brown};
}}
.stSelectbox > div > div {{
  background-color: white !important;
  color: {dark_brown} !important;
  border: 2px solid {dark_brown} !important;
  padding: 10px !important;
  border-radius: 8px !important;
}}
th {{
  background-color: #f3c1c6;
  font-weight: bold;
}}
td {{
  border-top: 1px solid {dark_brown};
  padding: 10px;
}}
</style>
"""

# Aplicar tema
st.set_page_config(page_title="üå∏ Exploradora de Acciones con Estilo", layout="wide")
st.markdown(theme_css, unsafe_allow_html=True)

# Men√∫ lateral con nueva opci√≥n de portafolio
menu = st.sidebar.radio("üåü Men√∫", ["üîç An√°lisis de empresa", "üì∞ Buscar noticias", "üíº Portafolio de Inversi√≥n"])

if menu == "üîç An√°lisis de empresa":
    st.title("üíó Exploradora de Acciones para Mujeres Inversionistas")
    st.markdown("Bienvenida a tu espacio financiero ‚ú®\nAnaliza acciones con estilo, confianza y claridad üíñ")

    # Input para s√≠mbolo burs√°til y per√≠odo
    ticker_input = st.text_input("üîç Escribe el s√≠mbolo burs√°til (Ej. AAPL, MSFT, TSLA...):", placeholder="Ej. AAPL")
    periodo = st.selectbox("üïí Periodo a analizar:", ["6mo", "1y", "5y", "max"], index=0)

    if st.button("‚ú® Analizar empresa"):
        if ticker_input.strip():
            try:
                ticker = yf.Ticker(ticker_input.strip().upper())
                info = ticker.info

                if not info or info.get("regularMarketPrice") is None:
                    st.warning("üö´ No pudimos encontrar ese s√≠mbolo. ¬°Revisa que est√© bien escrito!")
                else:
                    nombre = info.get("longName", "Nombre no disponible")
                    descripcion = info.get("longBusinessSummary", "Descripci√≥n no disponible")
                    sector = info.get("sector", "No disponible")
                    industria = info.get("industry", "No disponible")
                    pais = info.get("country", "No disponible")
                    logo = info.get("logo_url", "")

                    st.markdown(f"## üíº {nombre}")
                    if logo:
                        st.image(logo, width=120)

                    prompt = f"""Traduce y adapta el siguiente texto al espa√±ol profesional, c√°lido y f√°cil de entender para mujeres que est√°n aprendiendo sobre inversiones:\n\nDescripci√≥n:\n{descripcion}\n\nSector: {sector}\nIndustria: {industria}\nPa√≠s: {pais}"""
                    try:
                        if model:
                            respuesta = model.generate_content(prompt)
                            traducido = respuesta.text
                        else:
                            traducido = descripcion
                    except Exception:
                        traducido = descripcion

                    with st.expander("üå∑ ¬øQu√© hace esta empresa?", expanded=True):
                        st.markdown(traducido)

                    st.subheader("üìä Datos financieros clave")
                    claves = {
                        "üìà Precio actual": f"${info.get('regularMarketPrice', 'NA')}",
                        "üîÑ Cambio diario": f"{info.get('regularMarketChangePercent', 0):.2f}%",
                        "üè¢ Capitalizaci√≥n de mercado": info.get("marketCap", "NA"),
                        "üì¶ Volumen (hoy)": info.get("volume", "NA"),
                        "üìä Volumen promedio (30 d√≠as)": info.get("averageVolume", "NA"),
                        "üìö Ratio P/E": info.get("trailingPE", "NA"),
                        "üíµ Ganancias por acci√≥n (EPS)": info.get("trailingEps", "NA"),
                        "üìâ Beta (volatilidad hist√≥rica)": info.get("beta", "NA"),
                        "üóìÔ∏è Pr√≥ximo reporte de resultados": info.get("earningsDate", "NA")
                    }
                    st.table(pd.DataFrame.from_dict(claves, orient="index", columns=["Valor estimado"]))

                    hist = ticker.history(period=periodo).reset_index()
                    hist["MA20"] = hist["Close"].rolling(window=20).mean()

                    st.subheader("üìà Evoluci√≥n del precio y volumen")
                    precio = alt.Chart(hist).mark_line(color="#e88f9c").encode(x="Date:T", y="Close:Q")
                    promedio = alt.Chart(hist).mark_line(strokeDash=[4, 4], color="#d4a373").encode(x="Date:T", y="MA20:Q")
                    volumen = alt.Chart(hist).mark_bar(opacity=0.3).encode(x="Date:T", y=alt.Y("Volume:Q", title="Volumen"))
                    st.altair_chart((precio + promedio) & volumen, use_container_width=True)

                    st.subheader("üìÜ Rendimiento anual compuesto (CAGR)")
                    hoy = hist["Date"].max()
                    rendimiento = {"Periodo": [], "CAGR": []}

                    def calcular_cagr(p0, pf, a√±os):
                        if p0 > 0 and a√±os > 0:
                            return (pf / p0) ** (1 / a√±os) - 1
                        return None

                    for a√±os in [1, 3, 5]:
                        fecha_inicio = hoy - DateOffset(years=a√±os)
                        datos = hist[hist["Date"] >= fecha_inicio]
                        if not datos.empty:
                            p0, pf = datos.iloc[0]["Close"], datos.iloc[-1]["Close"]
                            cagr = calcular_cagr(p0, pf, a√±os)
                            rendimiento["Periodo"].append(f"{a√±os} a√±o(s)")
                            rendimiento["CAGR"].append(f"{cagr*100:.2f}%" if cagr else "No disponible")
                        else:
                            rendimiento["Periodo"].append(f"{a√±os} a√±o(s)")
                            rendimiento["CAGR"].append("No disponible")

                    st.dataframe(pd.DataFrame(rendimiento))

                    st.subheader("üí´ Volatilidad del precio")
                    rend_diarios = hist["Close"].pct_change()
                    std_anual = np.std(rend_diarios) * np.sqrt(252)
                    st.metric("Desviaci√≥n est√°ndar anualizada", f"{std_anual * 100:.2f}%")

                    st.subheader("üìâ Gr√°fica de cierre con l√≠nea de tendencia")
                    fig = px.line(hist, x="Date", y="Close", title="Precio de cierre con l√≠nea de tendencia", line_shape="linear")
                    fig.update_traces(line=dict(color=bright_pink))
                    st.plotly_chart(fig, use_container_width=True)

            except Exception as e:
                st.error(f"‚ö†Ô∏è Error: {str(e)}")
        else:
            st.warning("üîî Ingresa un s√≠mbolo para analizar.")